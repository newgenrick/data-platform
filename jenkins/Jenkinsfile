pipeline {
  agent any

  stages {

    stage('Clean Workspace') {
      steps {
        println "calling projectsListForPR"
        sh 'printenv'
        Set projectsChanged = []
        println 'branch : ${ghprbSourceBranch}'
        sh 'git checkout origin/${ghprbSourceBranch}'
        sh 'git --no-pager diff origin/main --name-only'
        changeSets.each( { changedFile ->
              def projectNames = changedFileToProjectNamesFn(changedFile)
              if(projectNames){
                   projectsChanged += projectNames
              }
         })

        println("changeset: ${projectsChanged}")
      }
    }
  }
}
def changedFileToProjectNamesFn = { changedFile ->
      def tokens = changedFile?.split('/')
      String projectName =  tokens?tokens[0]:''
      return [projectName]
}


def changeSets = sh(
      script: "git --no-pager diff origin/main --name-only",
         returnStdout: true
).split('\n')