pipeline {
  agent any

  stages {

    stage("Schema Build check") {
        script{
            println("Schema build in progress : " + getJobInfo("SchemaPRBuilder"))
        }
    }
    stage('Clean Workspace') {
      steps {
        println "calling projectsListForPR"
        sh 'printenv'

        println 'branch : ${ghprbSourceBranch}'
        sh 'git checkout origin/${ghprbSourceBranch}'
        sh 'git pull origin main'
        sh 'git --no-pager diff origin/main --name-only'
        sh 'touch ${ghprbSourceBranch}.txt'




        script{
            Set projectsChanged = []
            def changedFileToProjectNamesFn = { changedFile ->
                  def tokens = changedFile?.split('/')
                  String projectName =  tokens?tokens[0]:''
                  return [projectName]
            }




            def changeSets = sh(
                  script: "git --no-pager diff origin/main --name-only",
                     returnStdout: true
            ).split('\n')

            changeSets.each( { changedFile ->
                  def projectNames = changedFileToProjectNamesFn(changedFile)
                  if(projectNames){
                       projectsChanged += projectNames
                  }
             })
             println("changeset: ${projectsChanged}")

             Set GroupAServices = ["contact-summary-processor","agent-summary-processor"]
             Set GroupBServices = ["ingestion-services","dal-search"]
             Set SchemaPR = ["dataset-registration"]

             if(projectsChanged.size()!=1){
                error("MORE THAN SERVICES ARE CHANGED IN THIS PR!! ABORTING")
             }else{
                println("Preconditions passed")
             }

             println(projectsChanged.toList()?.find({true}))
             def changedService = projectsChanged.toList()?.find({true})
             def jobName = ""
             if(GroupAServices.contains(changedService)){
                println("GroupAServices")
                jobName = "GroupABuilder"
             }else if(GroupBServices.contains(changedService)){
                println("GroupBServices")
                jobName = "GroupBBuilder"
             }else if(SchemaPR.contains(changedService){
                println("SchemaPRBuilder")
                jobName = "SchemaPRBuilder"
             }else{
                error("ABORTING : UNKNOWN SERVICE BUCKET")
             }

             println("invoking downstream build job : ")
             stage (jobName) {
                 build job: jobName, parameters: [], wait: false
             }
        }




      }
    }
  }
}

@NonCPS
def getJobInfo(String jobName) {
    def lastBuild = Jenkins.instance.getItemByFullName(jobName).lastBuild.isBuilding()
    return lastBuild
}