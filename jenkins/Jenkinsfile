pipeline {
  agent any





  stages {

    stage("Schema Build check") {

        steps{
          gitStatusWrapper(account: 'newgenrick', credentialsId: '98f4342f-d789-4738-8781-8fb0e630b3cf',
                  		description: 'Validating', gitApiUrl: 'https://api.github.com',
                  			gitHubContext: 'data-platform-schema-build-wait', repo: 'data-platform', sha: ghprbActualCommit,
                  				successDescription: 'No more schema builds in progress',failureDescription: 'Schema build wait step terminated') {

                waitUntil(initialRecurrencePeriod: 5000){
                    script{
                        println("Schema build in progress : " + isSchemaBuildInProgress("SchemaPRBuilder"))
                        return !isSchemaBuildInProgress("SchemaPRBuilder")
                    }
                }
            }
        }
    }

    stage('Clean Workspace') {
      steps {
      gitStatusWrapper(account: 'newgenrick', credentialsId: '98f4342f-d789-4738-8781-8fb0e630b3cf',
                        		description: 'Validating', gitApiUrl: 'https://api.github.com',
                        			gitHubContext: 'data-platform-pr-build-router', repo: 'data-platform', sha: ghprbActualCommit,
                        				successDescription: 'Routed PR build to its group builder successfully',failureDescription: 'Error routing PR to its service group') {

        println "calling projectsListForPR"
        sh 'printenv'

        println 'branch : ${ghprbSourceBranch}'
        sh 'git checkout origin/${ghprbSourceBranch}'
        sh 'git pull origin main'
        sh 'git --no-pager diff origin/main --name-only'
        sh 'touch ${ghprbSourceBranch}.txt'




        script{
            Set projectsChanged = []
            def changedFileToProjectNamesFn = { changedFile ->
                  def tokens = changedFile?.split('/')
                  String projectName =  tokens?tokens[0]:''
                  return [projectName]
            }

            def changeSets = sh(
                  script: "git --no-pager diff origin/main --name-only",
                     returnStdout: true
            ).split('\n')

            changeSets.each( { changedFile ->
                  def projectNames = changedFileToProjectNamesFn(changedFile)
                  if(projectNames){
                       projectsChanged += projectNames
                  }
             })
             println("changeset: ${projectsChanged}")

             Set GroupAServices = ["contact-summary-processor","agent-summary-processor"]
             Set GroupBServices = ["ingestion-services","dal-search"]
             Set SchemaPR = ["dataset-registration"]

             if(projectsChanged.size()!=1){
                error("MORE THAN SERVICES ARE CHANGED IN THIS PR!! ABORTING")
             }else{
                println("Preconditions passed")
             }

             println(projectsChanged.toList()?.find({true}))
             def changedService = projectsChanged.toList()?.find({true})
             def jobName = ""
             if(GroupAServices.contains(changedService)){
                println("GroupAServices")
                jobName = "GroupABuilder"
             }else if(GroupBServices.contains(changedService)){
                println("GroupBServices")
                jobName = "GroupBBuilder"
             }else if(SchemaPR.contains(changedService)){
                println("SchemaPRBuilder")
                jobName = "SchemaPRBuilder"
             }else{
                error("ABORTING : UNKNOWN SERVICE BUCKET")
             }

             println("invoking downstream build job : ")
             stage (jobName) {
                 build job: jobName, parameters: [string(name: 'ghprbActualCommit', value: ghprbActualCommit)], wait: false
             }

             }
             //updatePrStatus()
        }
      }
    }
  }
}

@NonCPS
def isSchemaBuildInProgress(String jobName) {
    def lastBuild = Jenkins.instance.getItemByFullName(jobName).lastBuild.isBuilding()
    return lastBuild
}


// def updatePrStatus() {
//     def payload = """ {"state":"success","target_url":"https://example.com/build/status","description":"Build routed successfully!","context":"data-platform-build-router/jenkins"}"""
//     def response = httpRequest consoleLogResponseBody: true,
//             customHeaders: [[name: 'Authorization', value: "token ${GITHUB_PAT}"]],
//             httpMode: 'POST', requestBody: payload,
//             url: "https://api.github.com/repos/newgenrick/data-platform/statuses/${ghprbActualCommit}"
//
//
//     println("Build status update status: " + response.status + ", response: " + response.content)
//
// }